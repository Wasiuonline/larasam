<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use App\Models\RoleManagement;
use Illuminate\Validation\Rules\File as ValidateFile;
use Illuminate\Support\Facades\Validator;
use File as FileMC;
use Image;
use DB;

class GenClass extends Controller
{

	public static $domain = "reliancewisdom.com";
	public static $gen_name = "Samvick Technical Services Limited";
	public static $full_gen_name = "Samvick Technical Services Limited";
	public static $gen_email = "contact@reliancewisdom.com";
	public static $gen_phone = "+234 (0)806 320 9539";
	public static $foot_note = "<b>Note:</b> This email is autogenerated. Please do not reply.";
	public static $privates = "privates/";
	public static $admin = "sv22";
	public static $users = "users";
	public static $images = "images/";
	public static $app_curr = "&#8358;";

	public static function gen($data)
	{
		switch ($data) {
			case "date":
				return date("Y-m-d", time());
			case "date_time":
				return date("Y-m-d H:i:s", time());
			case "ticket_id":
				return date("YmdHis", time());
			case "rand_no":
				return rand(1000, 9999);
			case "regards":
				return "<p>&nbsp;</p><p>Regards,<br>" . self::$gen_name . " Team.</p>";
		}
	}

	public static function det_all_images($data)
	{
		$file_name = array();
		$data = public_path("images/{$data}");
		$file_array = File::glob($data);
		if ($file_array) {
			foreach ($file_array as $value) {
				$temp_name = explode("/", $value);
				$temp_name = array_slice($temp_name, -2, 2, false);
				$file_name[] = "images/" . implode("/", $temp_name);
			}
			return $file_name;
		}
	}

	public static function det_image($data, $index)
	{
		$file_name = "";
		$data = public_path("images/{$data}");
		$file_array = File::glob($data);
		if ($file_array) {
			$file_array = explode("/", $file_array[$index]);
			$file_array = array_slice($file_array, -2, 2, false);
			$file_name = "images/" . implode("/", $file_array);
		} else {
			$file_name = "images/logos/samvick-user-logo.png";
		}
		return $file_name;
	}

	public static function  upload_single_image($request, $feild_name, $file_temp_name, $url, $width = "", $height = "", $delete = "")
	{
		$file = $request->file($feild_name);
		$extension = strtolower($file->extension());
		$extension = ($extension == "jpeg") ? "jpg" : $extension;
		$file_name = $file_temp_name . self::gen("rand_no") . "." . $extension;

		$request->validate([
			$feild_name => ['required', ValidateFile::types(['jpg', 'jpeg', 'png', 'gif'])->max(5 * 1024)]
		], [
			"{$feild_name}.required" => "A file is required to be uploaded.",
			"{$feild_name}.mimes" => "This file type is not allowed.",
			"{$feild_name}.max" => "Maximum of 5MB is allowed for upload",
		]);

		if (!empty($delete)) {
			$data = public_path("images/{$url}/{$file_temp_name}*.*");
			$file_array = File::glob($data);
			foreach ($file_array as $filename) {
				FileMC::delete($filename);
			}
		}

		$imgFile = Image::make($file->getRealPath());
		$imgFile->resize($width, $height, function ($constraint) {
			$constraint->aspectRatio();
		})->save(public_path("images/{$url}/{$file_name}"));
		//File::copy(public_path("images/users/{$file_name}"), public_path('images/users/1pic.png'));
		//File::move(public_path("images/users/{$file_name}"), public_path('images/users/1pic.png'));
	}

	public static function upload_item_image($request, $feild_name, $file_temp_name, $url, $first_dimension = "", $second_dimension = "", $img_session = "", $session_name = "", $item = "item")
	{
		$file = $request->file($feild_name);
		$ticket_id = self::gen("ticket_id");
		$ticket_id = (!empty($img_session)) ? $img_session : $ticket_id;
		$rand_no = self::gen("rand_no");
		$extension = strtolower($file->extension());
		$extension = ($extension == "jpeg") ? "jpg" : $extension;
		$file_name = "{$file_temp_name}{$ticket_id}_{$rand_no}.{$extension}";
		$first_arr = explode("*", $first_dimension);
		$first_width = $first_arr[0];
		$first_height = $first_arr[1];
		$second_arr = explode("*", $second_dimension);
		$second_width = $second_arr[0];
		$second_height = $second_arr[1];

		$validator = Validator::make(request()->all(), [
			$feild_name => ['required', ValidateFile::types(['jpg', 'jpeg', 'png', 'gif'])->max(5 * 1024)]
		], [
			"{$feild_name}.required" => "<div class='alert alert-danger alert-dismissable fade in'><a href='#' class='close' data-dismiss='alert' aria-label='close'>&times;</a> A file is required to be uploaded.</div>",
			"{$feild_name}.mimes" => "<div class='alert alert-danger alert-dismissable fade in'><a href='#' class='close' data-dismiss='alert' aria-label='close'>&times;</a> This file type is not allowed.</div>",
			"{$feild_name}.max" => "<div class='alert alert-danger alert-dismissable fade in'><a href='#' class='close' data-dismiss='alert' aria-label='close'>&times;</a> Maximum of 5MB is allowed for upload.</div>",
		]);

		if ($validator->fails()) {
			$result = [0 => false];
			$result[1] = json_decode(json_encode($validator->messages()), true)[$feild_name][0];
			return $result;
		}

		$imgFile = Image::make($file->getRealPath());
		$imgFile->resize($first_width, $first_height, function ($constraint) {
			$constraint->aspectRatio();
		})->save(public_path("images/{$url}/" . $file_name));
		if (!empty($session_name)) {
			$resized_file = "images/{$url}/" . auth()->user()->id . "_{$item}_featured_{$ticket_id}_{$rand_no}.{$extension}";
		} else {
			$file_temp_name_array = explode("_", $file_temp_name);
			$item_id = $file_temp_name_array[0];
			$item_user_id = $file_temp_name_array[1];
			$resized_file = "images/{$item}s-featured/{$item_id}_{$item_user_id}_{$item}_featured_{$ticket_id}_{$rand_no}.{$extension}";
		}
		$imgFile = Image::make($file->getRealPath());
		$imgFile->resize($second_width, $second_height, function ($constraint) {
			$constraint->aspectRatio();
		})->save(public_path($resized_file));

		if (!empty($session_name)) {
			session(["{$session_name}.{$ticket_id}" => $ticket_id]);
			if (isset($request->picture_description)) {
				session(["{$session_name}_description.{$ticket_id}" => $request->picture_description]);
			}
		}

		$result = [0 => 1, 1 => $resized_file];
		if (isset($request->picture_description)) {
			$result[2] = $request->picture_description;
		}
		return $result;
		//File::copy(public_path("images/users/{$file_name}"), public_path('images/users/1pic.png'));
		//File::move(public_path("images/users/{$file_name}"), public_path('images/users/1pic.png'));
	}

	public static function current_page($data, $current = "")
	{
		$result = ($data == $current) ? "current" : "";
		return $result;
	}

	///================================================
	public static $count;
	public static $per_view;
	public static $page_link;
	public static $link_suffix;
	public static $style_class;
	public static $center_pages;
	public static $pn;
	public static $last_page;
	public static $add_attr;
	public static function page_numbers($result)
	{
		//global $per_view, $page_link, $link_suffix, $style_class, $center_pages, $pn, $sub1, $last_page, $count, $add_attr;

		///////////////////////////////////////////////////////
		$total = self::$count;

		self::$last_page = ceil($total / self::$per_view);

		if (self::$pn < 1) {
			self::$pn = 1;
		} else if (self::$pn > self::$last_page && !empty(self::$last_page)) {
			self::$pn = self::$last_page;
		}

		self::$center_pages = "";
		$sub4 = self::$pn - 4;
		$sub3 = self::$pn - 3;
		$sub1 = self::$pn - 1;
		$sub2 = self::$pn - 2;
		$add1 = self::$pn + 1;
		$add2 = self::$pn + 2;
		$add3 = self::$pn + 3;
		$add4 = self::$pn + 4;

		self::$center_pages .= (self::$pn > 1 && self::$last_page > 1) ? "<a href=\"" . self::$page_link . $sub1 . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">Previous</a>" : "";
		self::$center_pages .= ($sub4 > 0 && $add1 > self::$last_page && self::$last_page > 1) ? "<a href=\"" . self::$page_link . "{$sub4}" . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">{$sub4}</a>" : "";
		self::$center_pages .= ($sub3 > 0 && $add2 > self::$last_page && self::$last_page > 1) ? "<a href=\"" . self::$page_link . "{$sub3}" . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">{$sub3}</a>" : "";
		self::$center_pages .= ($sub2 > 0 && self::$last_page > 1) ? "<a href=\"" . self::$page_link . "{$sub2}" . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">{$sub2}</a>" : "";
		self::$center_pages .= ($sub1 > 0 && self::$last_page > 1) ? "<a href=\"" . self::$page_link . $sub1 . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">" . $sub1 . "</a>" : "";
		self::$center_pages .= (self::$last_page > 1) ? "<a href=\"" . self::$page_link . self::$pn . self::$link_suffix . "\" " . self::$add_attr . " class=\"current " . self::$style_class . "\">" . self::$pn . "</a>" : "";
		self::$center_pages .= ($add1 <= self::$last_page && self::$last_page > 1) ? "<a href=\"" . self::$page_link . "{$add1}" . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">{$add1}</a>" : "";
		self::$center_pages .= ($add2 <= self::$last_page && self::$last_page > 1) ? "<a href=\"" . self::$page_link . "{$add2}" . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">{$add2}</a>" : "";
		self::$center_pages .= ($sub2 < 1 && $add3 <= self::$last_page && self::$last_page > 1) ? "<a href=\"" . self::$page_link . "{$add3}" . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">{$add3}</a>" : "";
		self::$center_pages .= ($sub1 < 1 && $add4 <= self::$last_page && self::$last_page > 1) ? "<a href=\"" . self::$page_link . "{$add4}" . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">{$add4}</a>" : "";
		self::$center_pages .= (self::$pn < self::$last_page && self::$last_page > 1) ? "<a href=\"" . self::$page_link . "{$add1}" . self::$link_suffix . "\" " . self::$add_attr . " class=\"" . self::$style_class . "\">Next</a>" : "";
	}
	////====================================================

	public static function check_privilege($data)
	{
		$result = 0;
		if (!empty(auth()->user()->admin) && empty(auth()->user()->controller)) {
			$role_id = auth()->user()->role_id;
			$result = (!empty($result)) ? RoleManagement::where('id', $role_id)->where($data, 1)->get() : 0;
			$result = (!empty($result)) ? $result->$data : 0;
		} else if (!empty(auth()->user()->admin) && !empty(auth()->user()->controller)) {
			$result = 1;
		}
		return $result;
	}
	////====================================================

	///=====Role Management====////
	public static function role_redirect($data)
	{
		if (self::check_privilege($data) != 1) {
			//abort(403, 'Unauthorized action.');
			//return redirect('/errors/403')->with('not_success', 'Unauthorized action!');
			//return redirect('/contact')->with('not_success', 'Invalid access!');
			//self::redirect('/contact');
		}
	}

	public static function role_exists($data_id, $data)
	{
		global $edit;
		$column = static::in_table("role_management", [["id", "=", $data_id]], $data);
		if (!empty($edit) && !empty($column)) {
			echo " checked";
		}
	}

	/*public static function role_redirect($data){
		global $directory, $admin;
		if(check_privilege($data) != 1){
		redirect("{$directory}{$admin}");
		}
		}*/
	////====================================================

	public static function in_table($table, $where, $return)
	{
		$result = (!empty($table)) ? DB::table($table)->where($where)->value($return) : 0;
		return $result;
	}
	public static function in_table_count($table, $where)
	{
		$result = (!empty($table)) ? DB::table($table)->where($where)->get()->count() : 0;
		return $result;
	}

	public static function sub_date($data)
	{
		return date_format(date_create($data), "l F jS, Y");
	}
	public static function min_sub_date($data)
	{
		return date_format(date_create($data), "d/m/Y");
	}
	public static function full_date($data)
	{
		return date_format(date_create($data), "l F jS, Y h:i:s A");
	}
	public static function min_full_date($data)
	{
		return date_format(date_create($data), "d/m/Y h:i:s A");
	}
	////////////////====================

	public static function check_inputted($data = "", $sub_data = "")
	{
		if (!empty(old($data))) {
			return old($data);
		} else {
			return (!empty(request($data))) ? request($data) : $sub_data;
		}
	}
	public static function check_checked($data = "", $sub_data = "", $main_data = "")
	{
		if (!empty(old($data)) && old($data) == $sub_data) {
			return " checked";
		} else {
			return ((!empty(request($data)) && request($data) == $sub_data) or (empty(request($data)) && $main_data == $sub_data)) ? " checked" : "";
		}
	}
	public static function check_selected($data = "", $sub_data = "", $main_data = "")
	{
		if (!empty(old($data)) && old($data) == $sub_data) {
			return " selected";
		} else {
			return ((!empty(request($data)) && request($data) == $sub_data) or (empty(request($data)) && $main_data == $sub_data)) ? " selected" : "";
		}
	}

	public static function s_query($query, $per_view, $title, $page_link, $session_prefix, $link_suffix = "")
	{
		$display_all = $query->get();
		if (!empty(session($session_prefix . '-no_of_rows'))) {
			static::$per_view = session($session_prefix . '-no_of_rows');
		} else if (!empty($per_view)) {
			static::$per_view = $per_view;
			session([$session_prefix . '-no_of_rows', $per_view]);
		}
		static::$pn = (!empty(request('pn'))) ? request('pn') : 1;
		static::$page_link = $page_link . "/";
		static::$link_suffix = $link_suffix;
		static::$style_class = "";
		static::$count = $display_all->count();
		static::page_numbers($display_all);
		$offset = (static::$per_view * static::$pn) - static::$per_view;
		$display_few = $query->orderBy('id', 'DESC')->offset($offset)->limit(static::$per_view)->get();
		$default = 1;
		$page_slug = $session_prefix;
		return compact('display_few', 'title', 'page_slug', 'default');
	}

	public static function search($page, $req_data, $store = 0)
	{
		if (!empty($store)) {
			foreach ($req_data as $value) {
				session([$page . "-" . $value => request($value)]);
			}
		} else {
			foreach ($req_data as $value) {
				$result[$value] = session($page . "-" . $value);
			}
			return $result;
		}
	}

	public static function break_long($data, $prefix = "", $suffix = "")
	{
		$broken_data = $prefix . wordwrap($data, 15, "<br />", true) . $suffix;
		return $broken_data;
	}
	public static function admin_id($data)
	{
		$result = "LA" . $data;
		return $result;
	}
	public static function user_id($data)
	{
		$result = "LU" . $data;
		return $result;
	}

	public static function formatNumber($amount)
	{
		$amountOriginal = $amount;
		if ($amountOriginal != "") {
			$sign_left = ($amountOriginal < 0) ? "(" : "";
			$sign_right = ($amountOriginal < 0) ? ")" : "";
			$amountOriginal = $sign_left . number_format(abs($amountOriginal), 2, '.', ',') . $sign_right;
		}
		return $amountOriginal;
	}

	public static function formatQty($amount)
	{
		$amountOriginal = $amount;
		if ($amountOriginal != "") {
			$amountOriginal = number_format($amountOriginal, 0, '', ',');
		}
		return $amountOriginal;
	}
	////////////////====================

}
